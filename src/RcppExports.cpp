// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BatchMat
Rcpp::NumericVector BatchMat(const arma::mat p, const arma::umat idx, Rcpp::List attrs, Rcpp::List arguments);
RcppExport SEXP _PhyloProfileKit_BatchMat(SEXP pSEXP, SEXP idxSEXP, SEXP attrsSEXP, SEXP argumentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::umat >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type attrs(attrsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type arguments(argumentsSEXP);
    rcpp_result_gen = Rcpp::wrap(BatchMat(p, idx, attrs, arguments));
    return rcpp_result_gen;
END_RCPP
}
// BatchBigmat
Rcpp::NumericVector BatchBigmat(const arma::mat p, SEXP idx, Rcpp::List attrs, Rcpp::List arguments);
RcppExport SEXP _PhyloProfileKit_BatchBigmat(SEXP pSEXP, SEXP idxSEXP, SEXP attrsSEXP, SEXP argumentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type attrs(attrsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type arguments(argumentsSEXP);
    rcpp_result_gen = Rcpp::wrap(BatchBigmat(p, idx, attrs, arguments));
    return rcpp_result_gen;
END_RCPP
}
// CollapseTree
arma::mat CollapseTree(arma::mat edgeMat, arma::uword tipNum, arma::vec f, arma::vec t);
RcppExport SEXP _PhyloProfileKit_CollapseTree(SEXP edgeMatSEXP, SEXP tipNumSEXP, SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type edgeMat(edgeMatSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type tipNum(tipNumSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(CollapseTree(edgeMat, tipNum, f, t));
    return rcpp_result_gen;
END_RCPP
}
// isTwoRowsEqual
bool isTwoRowsEqual(arma::mat m);
RcppExport SEXP _PhyloProfileKit_isTwoRowsEqual(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(isTwoRowsEqual(m));
    return rcpp_result_gen;
END_RCPP
}
// InferGainNodes
arma::uvec InferGainNodes(Rcpp::List gainList);
RcppExport SEXP _PhyloProfileKit_InferGainNodes(SEXP gainListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type gainList(gainListSEXP);
    rcpp_result_gen = Rcpp::wrap(InferGainNodes(gainList));
    return rcpp_result_gen;
END_RCPP
}
// InferEdge
arma::imat InferEdge(arma::umat edgeMat, Rcpp::List tipPath, Rcpp::NumericVector pr);
RcppExport SEXP _PhyloProfileKit_InferEdge(SEXP edgeMatSEXP, SEXP tipPathSEXP, SEXP prSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type edgeMat(edgeMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tipPath(tipPathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pr(prSEXP);
    rcpp_result_gen = Rcpp::wrap(InferEdge(edgeMat, tipPath, pr));
    return rcpp_result_gen;
END_RCPP
}
// DolloDist
arma::uword DolloDist(arma::umat edgeMat, Rcpp::List tipPath, Rcpp::NumericVector f, Rcpp::NumericVector t);
RcppExport SEXP _PhyloProfileKit_DolloDist(SEXP edgeMatSEXP, SEXP tipPathSEXP, SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type edgeMat(edgeMatSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type tipPath(tipPathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(DolloDist(edgeMat, tipPath, f, t));
    return rcpp_result_gen;
END_RCPP
}
// MergeList
arma::uvec MergeList(Rcpp::List x);
RcppExport SEXP _PhyloProfileKit_MergeList(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(MergeList(x));
    return rcpp_result_gen;
END_RCPP
}
// eachMI
double eachMI(double p1, double p2, double p3, double n);
RcppExport SEXP _PhyloProfileKit_eachMI(SEXP p1SEXP, SEXP p2SEXP, SEXP p3SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< double >::type p3(p3SEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(eachMI(p1, p2, p3, n));
    return rcpp_result_gen;
END_RCPP
}
// Info
double Info(arma::uvec v, double n);
RcppExport SEXP _PhyloProfileKit_Info(SEXP vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Info(v, n));
    return rcpp_result_gen;
END_RCPP
}
// HistTwo
arma::uvec HistTwo(arma::vec x, arma::vec y, arma::uword bin);
RcppExport SEXP _PhyloProfileKit_HistTwo(SEXP xSEXP, SEXP ySEXP, SEXP binSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type bin(binSEXP);
    rcpp_result_gen = Rcpp::wrap(HistTwo(x, y, bin));
    return rcpp_result_gen;
END_RCPP
}
// FindInter
arma::uvec FindInter(arma::vec x, arma::vec interval);
RcppExport SEXP _PhyloProfileKit_FindInter(SEXP xSEXP, SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(FindInter(x, interval));
    return rcpp_result_gen;
END_RCPP
}
// FindInterSingle
arma::uword FindInterSingle(double value, arma::vec interval);
RcppExport SEXP _PhyloProfileKit_FindInterSingle(SEXP valueSEXP, SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(FindInterSingle(value, interval));
    return rcpp_result_gen;
END_RCPP
}
// gInter
arma::vec gInter(arma::vec x, arma::uword bin);
RcppExport SEXP _PhyloProfileKit_gInter(SEXP xSEXP, SEXP binSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type bin(binSEXP);
    rcpp_result_gen = Rcpp::wrap(gInter(x, bin));
    return rcpp_result_gen;
END_RCPP
}
// CountRepeat
arma::uvec CountRepeat(arma::uvec x);
RcppExport SEXP _PhyloProfileKit_CountRepeat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(CountRepeat(x));
    return rcpp_result_gen;
END_RCPP
}
// NPPNorm
Rcpp::NumericMatrix NPPNorm(Rcpp::NumericMatrix rawBitM, double bitCutoff, double bitReset, double minConserve);
RcppExport SEXP _PhyloProfileKit_NPPNorm(SEXP rawBitMSEXP, SEXP bitCutoffSEXP, SEXP bitResetSEXP, SEXP minConserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rawBitM(rawBitMSEXP);
    Rcpp::traits::input_parameter< double >::type bitCutoff(bitCutoffSEXP);
    Rcpp::traits::input_parameter< double >::type bitReset(bitResetSEXP);
    Rcpp::traits::input_parameter< double >::type minConserve(minConserveSEXP);
    rcpp_result_gen = Rcpp::wrap(NPPNorm(rawBitM, bitCutoff, bitReset, minConserve));
    return rcpp_result_gen;
END_RCPP
}
// SVDNorm
Rcpp::NumericMatrix SVDNorm(Rcpp::NumericMatrix rawBitM, double bitCutoff, double bitReset, double minConserve, double trimming);
RcppExport SEXP _PhyloProfileKit_SVDNorm(SEXP rawBitMSEXP, SEXP bitCutoffSEXP, SEXP bitResetSEXP, SEXP minConserveSEXP, SEXP trimmingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rawBitM(rawBitMSEXP);
    Rcpp::traits::input_parameter< double >::type bitCutoff(bitCutoffSEXP);
    Rcpp::traits::input_parameter< double >::type bitReset(bitResetSEXP);
    Rcpp::traits::input_parameter< double >::type minConserve(minConserveSEXP);
    Rcpp::traits::input_parameter< double >::type trimming(trimmingSEXP);
    rcpp_result_gen = Rcpp::wrap(SVDNorm(rawBitM, bitCutoff, bitReset, minConserve, trimming));
    return rcpp_result_gen;
END_RCPP
}
// SVDPhy
Rcpp::NumericMatrix SVDPhy(Rcpp::NumericMatrix bitM, double bitReset, double minConserve, double trimming);
RcppExport SEXP _PhyloProfileKit_SVDPhy(SEXP bitMSEXP, SEXP bitResetSEXP, SEXP minConserveSEXP, SEXP trimmingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bitM(bitMSEXP);
    Rcpp::traits::input_parameter< double >::type bitReset(bitResetSEXP);
    Rcpp::traits::input_parameter< double >::type minConserve(minConserveSEXP);
    Rcpp::traits::input_parameter< double >::type trimming(trimmingSEXP);
    rcpp_result_gen = Rcpp::wrap(SVDPhy(bitM, bitReset, minConserve, trimming));
    return rcpp_result_gen;
END_RCPP
}
// SimCor_
double SimCor_(arma::vec f, arma::vec t);
RcppExport SEXP _PhyloProfileKit_SimCor_(SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(SimCor_(f, t));
    return rcpp_result_gen;
END_RCPP
}
// SimJaccard_
double SimJaccard_(arma::vec f, arma::vec t);
RcppExport SEXP _PhyloProfileKit_SimJaccard_(SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(SimJaccard_(f, t));
    return rcpp_result_gen;
END_RCPP
}
// DistHamming_
double DistHamming_(arma::vec f, arma::vec t);
RcppExport SEXP _PhyloProfileKit_DistHamming_(SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(DistHamming_(f, t));
    return rcpp_result_gen;
END_RCPP
}
// DistManhattan_
double DistManhattan_(arma::vec f, arma::vec t);
RcppExport SEXP _PhyloProfileKit_DistManhattan_(SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(DistManhattan_(f, t));
    return rcpp_result_gen;
END_RCPP
}
// DistEuclidean_
double DistEuclidean_(arma::vec f, arma::vec t);
RcppExport SEXP _PhyloProfileKit_DistEuclidean_(SEXP fSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(DistEuclidean_(f, t));
    return rcpp_result_gen;
END_RCPP
}
// DistMinkowski_
double DistMinkowski_(arma::vec f, arma::vec t, arma::uword p);
RcppExport SEXP _PhyloProfileKit_DistMinkowski_(SEXP fSEXP, SEXP tSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type f(fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(DistMinkowski_(f, t, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PhyloProfileKit_BatchMat", (DL_FUNC) &_PhyloProfileKit_BatchMat, 4},
    {"_PhyloProfileKit_BatchBigmat", (DL_FUNC) &_PhyloProfileKit_BatchBigmat, 4},
    {"_PhyloProfileKit_CollapseTree", (DL_FUNC) &_PhyloProfileKit_CollapseTree, 4},
    {"_PhyloProfileKit_isTwoRowsEqual", (DL_FUNC) &_PhyloProfileKit_isTwoRowsEqual, 1},
    {"_PhyloProfileKit_InferGainNodes", (DL_FUNC) &_PhyloProfileKit_InferGainNodes, 1},
    {"_PhyloProfileKit_InferEdge", (DL_FUNC) &_PhyloProfileKit_InferEdge, 3},
    {"_PhyloProfileKit_DolloDist", (DL_FUNC) &_PhyloProfileKit_DolloDist, 4},
    {"_PhyloProfileKit_MergeList", (DL_FUNC) &_PhyloProfileKit_MergeList, 1},
    {"_PhyloProfileKit_eachMI", (DL_FUNC) &_PhyloProfileKit_eachMI, 4},
    {"_PhyloProfileKit_Info", (DL_FUNC) &_PhyloProfileKit_Info, 2},
    {"_PhyloProfileKit_HistTwo", (DL_FUNC) &_PhyloProfileKit_HistTwo, 3},
    {"_PhyloProfileKit_FindInter", (DL_FUNC) &_PhyloProfileKit_FindInter, 2},
    {"_PhyloProfileKit_FindInterSingle", (DL_FUNC) &_PhyloProfileKit_FindInterSingle, 2},
    {"_PhyloProfileKit_gInter", (DL_FUNC) &_PhyloProfileKit_gInter, 2},
    {"_PhyloProfileKit_CountRepeat", (DL_FUNC) &_PhyloProfileKit_CountRepeat, 1},
    {"_PhyloProfileKit_NPPNorm", (DL_FUNC) &_PhyloProfileKit_NPPNorm, 4},
    {"_PhyloProfileKit_SVDNorm", (DL_FUNC) &_PhyloProfileKit_SVDNorm, 5},
    {"_PhyloProfileKit_SVDPhy", (DL_FUNC) &_PhyloProfileKit_SVDPhy, 4},
    {"_PhyloProfileKit_SimCor_", (DL_FUNC) &_PhyloProfileKit_SimCor_, 2},
    {"_PhyloProfileKit_SimJaccard_", (DL_FUNC) &_PhyloProfileKit_SimJaccard_, 2},
    {"_PhyloProfileKit_DistHamming_", (DL_FUNC) &_PhyloProfileKit_DistHamming_, 2},
    {"_PhyloProfileKit_DistManhattan_", (DL_FUNC) &_PhyloProfileKit_DistManhattan_, 2},
    {"_PhyloProfileKit_DistEuclidean_", (DL_FUNC) &_PhyloProfileKit_DistEuclidean_, 2},
    {"_PhyloProfileKit_DistMinkowski_", (DL_FUNC) &_PhyloProfileKit_DistMinkowski_, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_PhyloProfileKit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
